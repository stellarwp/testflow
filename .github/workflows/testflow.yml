name: TestFlow

on:
  workflow_call:
    inputs:
      config:
        description: 'Configuration file path'
        required: false
        type: string
        default: 'testflow.yaml'
      profile:
        description: 'Configuration profile to use'
        required: false
        type: string
      php:
        description: 'PHP version'
        required: false
        type: string
      mysql:
        description: 'MySQL version'
        required: false
        type: string
      wordpress:
        description: 'WordPress version'
        required: false
        type: string
      plugin-zips:
        description: 'Plugin ZIP file patterns (comma-separated)'
        required: false
        type: string
      test-patterns:
        description: 'Test file patterns (comma-separated)'
        required: false
        type: string
      workers:
        description: 'Number of test workers'
        required: false
        type: string
        default: '1'
      retries:
        description: 'Number of test retries'
        required: false
        type: string
        default: '2'
      timeout:
        description: 'Test timeout in milliseconds'
        required: false
        type: string
        default: '30000'
      activate-plugins:
        description: 'Plugins to activate (comma-separated)'
        required: false
        type: string
      skip-activation:
        description: 'Plugins to skip activation (comma-separated)'
        required: false
        type: string
      debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false
      continue-on-error:
        description: 'Continue on test failures'
        required: false
        type: boolean
        default: false
      coverage:
        description: 'Generate test coverage reports'
        required: false
        type: boolean
        default: false
      artifacts:
        description: 'Upload test artifacts'
        required: false
        type: boolean
        default: true
      cache-key:
        description: 'Custom cache key suffix'
        required: false
        type: string
      setup-commands:
        description: 'Additional setup commands (newline-separated)'
        required: false
        type: string
      teardown-commands:
        description: 'Additional teardown commands (newline-separated)'
        required: false
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.continue-on-error }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Lando
        uses: lando/setup-lando@v3
        with:
          telemetry: false
          auto-setup: false

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .testflow-cache
          key: testflow-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/package.json') }}-${{ inputs.cache-key || github.sha }}
          restore-keys: |
            testflow-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/package.json') }}-
            testflow-${{ runner.os }}-

      - name: Install TestFlow
        run: |
          # Check if TestFlow is already in dependencies
          if ! bun pm ls | grep -q "@stellarwp/testflow\|testflow" && ! grep -q "testflow" package.json; then
            echo "TestFlow not found in dependencies, installing from GitHub..."
            bun add github:stellarwp/testflow
          else
            echo "TestFlow found in dependencies, skipping installation"
          fi

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      - name: Verify TestFlow installation
        run: bunx testflow --help

      - name: List available profiles
        if: ${{ !inputs.profile }}
        run: |
          if [ -f "${{ inputs.config }}" ]; then
            echo "Available profiles:"
            bunx testflow profiles -c "${{ inputs.config }}" || echo "No profiles found or single config"
          fi

      - name: Validate configuration
        run: |
          if [ -f "${{ inputs.config }}" ]; then
            bunx testflow validate -c "${{ inputs.config }}" ${{ inputs.profile && format('-p {0}', inputs.profile) || '' }}
          else
            echo "⚠️ Configuration file not found: ${{ inputs.config }}"
            echo "Creating default configuration..."
            bunx testflow init -c "${{ inputs.config }}"
          fi

      - name: Run additional setup commands
        if: ${{ inputs.setup-commands }}
        run: |
          echo "Running additional setup commands..."
          echo "${{ inputs.setup-commands }}" | while IFS= read -r cmd; do
            if [ -n "$cmd" ]; then
              echo "Executing: $cmd"
              eval "$cmd"
            fi
          done

      - name: Start Lando
        run: |
          # Ensure proper permissions
          sudo chown -R $(id -u):$(id -g) .
          
          # Pre-start Lando to avoid timing issues
          if ! lando info; then
            echo "Initializing Lando environment..."
          fi

      - name: Run TestFlow tests
        id: testflow
        run: |
          # Build TestFlow command
          cmd="bunx testflow run"
          
          # Add configuration options
          cmd="$cmd -c '${{ inputs.config }}'"
          
          if [ -n "${{ inputs.profile }}" ]; then
            cmd="$cmd --profile '${{ inputs.profile }}'"
          fi
          
          if [ -n "${{ inputs.php }}" ]; then
            cmd="$cmd --php '${{ inputs.php }}'"
          fi
          
          if [ -n "${{ inputs.mysql }}" ]; then
            cmd="$cmd --mysql '${{ inputs.mysql }}'"
          fi
          
          if [ -n "${{ inputs.wordpress }}" ]; then
            cmd="$cmd --wordpress '${{ inputs.wordpress }}'"
          fi
          
          if [ -n "${{ inputs.plugin-zips }}" ]; then
            cmd="$cmd --zips '${{ inputs.plugin-zips }}'"
          fi
          
          if [ -n "${{ inputs.test-patterns }}" ]; then
            cmd="$cmd --patterns '${{ inputs.test-patterns }}'"
          fi
          
          if [ -n "${{ inputs.workers }}" ]; then
            cmd="$cmd --workers ${{ inputs.workers }}"
          fi
          
          if [ -n "${{ inputs.retries }}" ]; then
            cmd="$cmd --retries ${{ inputs.retries }}"
          fi
          
          if [ -n "${{ inputs.timeout }}" ]; then
            cmd="$cmd --timeout ${{ inputs.timeout }}"
          fi
          
          if [ -n "${{ inputs.activate-plugins }}" ]; then
            cmd="$cmd --activate '${{ inputs.activate-plugins }}'"
          fi
          
          if [ -n "${{ inputs.skip-activation }}" ]; then
            cmd="$cmd --skip-activation '${{ inputs.skip-activation }}'"
          fi
          
          if [ "${{ inputs.debug }}" = "true" ]; then
            cmd="$cmd --debug"
          fi
          
          echo "Executing: $cmd"
          eval "$cmd"

      - name: Generate test coverage
        if: ${{ inputs.coverage && always() }}
        run: |
          if [ -d "coverage" ]; then
            echo "Generating coverage report..."
            bunx c8 report --reporter=html --reporter=lcov
          fi

      - name: Upload test results
        if: ${{ inputs.artifacts && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: testflow-results-${{ strategy.job-index || 'single' }}
          path: |
            test-results/
            coverage/
            screenshots/
            videos/
            *.log
            .lando.log
          retention-days: 7

      - name: Upload coverage to Codecov
        if: ${{ inputs.coverage && always() }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Comment test results on PR
        if: ${{ github.event_name == 'pull_request' && always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let resultsContent = '';
            
            try {
              if (fs.existsSync('test-results/results.json')) {
                const results = JSON.parse(fs.readFileSync('test-results/results.json', 'utf8'));
                resultsContent = `
            ## 🧪 TestFlow Results
            
            **Configuration:** \`${{ inputs.config }}\`${inputs.profile ? ` (Profile: \`${{ inputs.profile }}\`)` : ''}
            **Environment:** PHP ${{ inputs.php || 'default' }}, MySQL ${{ inputs.mysql || 'default' }}, WordPress ${{ inputs.wordpress || 'default' }}
            
            | Status | Count |
            |--------|-------|
            | ✅ Passed | ${results.passed} |
            | ❌ Failed | ${results.failed} |
            | ⏭️ Skipped | ${results.skipped} |
            | 📈 Total | ${results.total} |
            | ⏱️ Duration | ${(results.duration / 1000).toFixed(2)}s |
            
            ${results.failures.length > 0 ? `
            ### Failures:
            ${results.failures.map(f => `- **${f.test}** in \`${f.file}\`: ${f.error}`).join('\n')}
            ` : ''}
                `;
              } else {
                resultsContent = `
            ## 🧪 TestFlow Results
            
            Tests completed. Check the workflow logs for detailed results.
                `;
              }
            } catch (error) {
              resultsContent = `
            ## 🧪 TestFlow Results
            
            Test execution completed. Results file not found or could not be parsed.
              `;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: resultsContent
            });

      - name: Run additional teardown commands
        if: ${{ inputs.teardown-commands && always() }}
        run: |
          echo "Running additional teardown commands..."
          echo "${{ inputs.teardown-commands }}" | while IFS= read -r cmd; do
            if [ -n "$cmd" ]; then
              echo "Executing: $cmd"
              eval "$cmd" || echo "Teardown command failed (non-critical): $cmd"
            fi
          done

      - name: Clean up Lando
        if: ${{ always() }}
        run: |
          if command -v lando &> /dev/null; then
            lando destroy -y || echo "Lando cleanup failed (non-critical)"
          fi 